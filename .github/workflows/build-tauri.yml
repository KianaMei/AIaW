name: 'Build Tauri'

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'


jobs:
  publish-tauri:
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'pnpm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # Linux/macOS builders removed for personal Windows-only builds

      - name: install frontend dependencies
        run: pnpm install

      - name: setup .env
        run: cp .env.app .env.local

      - name: Disable updater artifacts if no signing key
        if: ${{ env.TAURI_SIGNING_PRIVATE_KEY == '' }}
        shell: bash
        run: |
          node -e "const fs=require('fs');const p='src-tauri/tauri.conf.json';const j=JSON.parse(fs.readFileSync(p,'utf8'));j.bundle=j.bundle||{};if(j.bundle.createUpdaterArtifacts){j.bundle.createUpdaterArtifacts=false;fs.writeFileSync(p,JSON.stringify(j,null,2));console.log('Disabled updater artifacts due to missing TAURI_SIGNING_PRIVATE_KEY');}"

      - name: Determine tag
        id: vars
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          fi

      - name: Ensure release exists via gh
        id: ensure_release
        shell: bash
        run: |
          TAG='${{ steps.vars.outputs.tag }}'
          if ! gh release view "$TAG" >/dev/null 2>&1; then
            gh release create "$TAG" -t "$TAG" -n "Automated release" || exit 1
          fi
          echo "release_id=$(gh release view "$TAG" --json id -q .id)" >> "$GITHUB_OUTPUT"

      - name: Build & Publish (using releaseId)
        uses: tauri-apps/tauri-action@v0
        with:
          releaseId: ${{ steps.ensure_release.outputs.release_id }}
          includeDebug: true
          args: ${{ matrix.args }}

      - name: Upload raw installers (.exe/.msi)
        if: always()
        shell: bash
        run: |
          TAG='${{ steps.vars.outputs.tag }}'
          shopt -s globstar nullglob
          files=(src-tauri/target/**/bundle/*/*.{exe,msi})
          echo "Found: ${files[@]}"
          for f in "${files[@]}"; do
            [ -f "$f" ] && gh release upload "$TAG" "$f" --clobber || true
          done

      # Skip latest.json linux-deb augmentation since Linux builds are disabled
